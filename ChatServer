import java.io.*;
import java.net.*;
import java.util.concurrent.*;

public class ChatServer {
    private static final int PORT = 5000;
    private static final ConcurrentMap<String, ClientHandler> clients = new ConcurrentHashMap<>();

    public static void main(String[] args) {
        System.out.println("✅ Chat server starting on port " + PORT);
        try (ServerSocket serverSocket = new ServerSocket(PORT)) {
            while (true) {
                Socket socket = serverSocket.accept();
                ClientHandler handler = new ClientHandler(socket);
                new Thread(handler).start();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // broadcast to all clients
    static void broadcast(String message, String excludeUser) {
        for (ClientHandler client : clients.values()) {
            if (excludeUser != null && excludeUser.equals(client.username)) continue;
            client.sendMessage(message);
        }
    }

    // remove client
    static void removeClient(String username) {
        clients.remove(username);
        broadcast("SERVER: " + username + " has left the chat.", null);
    }

    private static class ClientHandler implements Runnable {
        private Socket socket;
        private String username;
        private BufferedReader in;
        private PrintWriter out;

        ClientHandler(Socket socket) {
            this.socket = socket;
        }

        public void run() {
            try {
                in  = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                out = new PrintWriter(socket.getOutputStream(), true);

                // username loop
                while (true) {
                    out.println("SUBMITNAME");
                    String name = in.readLine();
                    if (name == null) return;
                    name = name.trim();
                    if (!name.isEmpty() && clients.putIfAbsent(name, this) == null) {
                        username = name;
                        out.println("NAMEACCEPTED " + username);
                        break;
                    } else {
                        out.println("NAMEINUSE");
                    }
                }

                broadcast("SERVER: " + username + " joined the chat.", username);

                // message loop
                String msg;
                while ((msg = in.readLine()) != null) {
                    if (msg.equalsIgnoreCase("/quit") || msg.equalsIgnoreCase("/exit")) {
                        out.println("BYE");
                        break;
                    }
                    broadcast(username + ": " + msg, null);
                }
            } catch (IOException e) {
                System.out.println("❌ Connection error with client " + username);
            } finally {
                if (username != null) removeClient(username);
                try { socket.close(); } catch (IOException ignored) {}
            }
        }

        void sendMessage(String msg) {
            if (out != null) out.println("MESSAGE " + msg);
        }
    }
}

